mape <- function(actual, predicted){
sum(abs((actual - predicted) / actual)) / length(actual)
}
mape(c(13,16,15,18,20), c(15,10,21,13,16))
grouped_mean <- function(df, group_var, mean_var){
df|>
group_by({{group_var}})|>
summarise(mean({{mean_var}}))
}
df <- tibble(
mean_var = 1,
group_var = "g",
group = 1,
x = 10,
y = 100
)
df|>
grouped_mean(group, x)
summary6 <- function(data, var){
data|>
summarise(
min = min({{var}}, na.rm = TRUE),
mean = mean({{var}}, na.rm = TRUE),
median = median({{var}}, na.rm = TRUE),
max = max({{var}}, na.rm = TRUE),
n = n(),
n_miss = sum(is.na({{var}})),
.groups = "drop"
)
}
diamonds|>
summary6(carat)
diamonds|>
group_by(cut)|>
summary6(carat)
diamonds|>
group_by(cut)|>
summary6(log10(carat))
count_prop <- function(df, var, sort = FALSE){
df|>
count({{var}}, sort = sort)|>
mutate(prop = n / sum(n))
}
diamonds|>
count_prop(clarity)
unique_where <- function(df, condition, var){
df|>
filter({{condition}})|>
distinct({{var}})|>
arrange({{var}})
}
flights|>
unique_where(month==12, dest)
flights|>
filter({{rows}})|>
select(time, hour, carrier, flight, {{cols}})
subset_flights <- function(rows, cols){
flights|>
filter({{rows}})|>
select(time, hour, carrier, flight, {{cols}})
}
count_missing <- function(df, group_vars, x_var){
df|>
group_by({{group_vars}})|>
summarise(
n_miss = sum(is.na({{x_var}})),
.groups = "drop"
)
}
flights|>
count_missing(c(year, month, day), dep_time)
count_missing <- function(df, group_vars, x_var){
group_by(pick({{group_vars}}))|>
summarise(
n_miss = sum(is.na({{x_var}})),
.groups = "drop"
)
}
flights|>
count_missing(c(year, month, day), dep_time)
count_missing <- function(df, group_vars, x_var){
df|>
group_by(pick({{group_vars}}))|>
summarise(
n_miss = sum(is.na({{x_var}})),
.groups = "drop"
)
}
flights|>
count_missing(c(year, month, day), dep_time)
count_wide <- function(data, rows, cols){
data|>
count(pick(c({{rows}}, {{cols}})))|>
pivot_wider(
names_from = {{cols}},
values_from = n,
names_sort = TRUE,
values_fill = 0
)
}
diamonds|>
count_wide(c(clarity, color), cut)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(nycflights13)
diamonds %>%
ggplot(aes(x = carat)) +
geom_histogram(binwidth = 0.1)
diamonds %>%
ggplot(aes(x = carat)) %>%
geom_histogram(binwidth = 0.05)
diamonds %>%
ggplot(aes(x = carat)) +
geom_histogram(binwidth = 0.05)
histogram <- function(df, var, binwidth = NULL){
df %>%
ggplot(aes(x = {{var}})) +
geom_histogram(binwidth = binwidth)
}
diamonds %>%
histogram(carat, 0.1)
diamonds %>%
histogram(carat, 0.1) +
labs(x = "Size in carats", y = "Number of diamonds")
linearity_check <- function(df, x, y){
df %>%
ggplot(aes(x = {{x}}, y = {{y}})) +
geom_point() +
geom_smooth(method = "loess", formula = y ~ x, color = "orange", se = FALSE) +
geom_smooth(method = "lm", formula = y ~ x, color = "blue", se = FALSE)
}
starwars %>%
filter(mass < 1000) %>%
linearity_check(mass, height)
hex_plot <- function(df, x, y, z, bins = 20, fun = "mean"){
df %>%
ggplot(aes(x = {{x}}, y = {{y}}, z = {{z}})) +
stat_summary_hex(
aes(color = after_scale(fill)),
bins = bins,
fun = fun,
)
}
diamonds %>%
hex_plot(carat, price, depth)
sorted_bars <- function(df, var){
df %>%
mutate({{var}} := fct_rev(fct_infreq({{ var }})))} %>%
ggplot(aes(y = {{var}})) +
geom_bar()
diamonds %>%
sorted_bars(clarity)
conditional_bars <- function(df, condition, var){
df %>%
filter({{condition}}) %>%
ggplot(aes(x = {{var}})) +
geom_bar()
}
diamonds %>%
conditional_bars(cut == "Good", clarity)
histogram <- function(df, var, binwidth){
label <- rlang::englue("A histogram of {{var}} with binwidth {binwidth}")
df %>%
ggplot(aes(x = {{var}})) +
geom_histogram(binwidth = binwidth) +
labs(title = label)
}
diamonds %>%
histogram(carat, 0.1)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
df <- tibble(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10)
)
df %>%
summarise(
n = n(),
a = median(a),
b = median(b),
c = median(c),
d = median(d)
)
df %>%
summarise(
n = n(),
across(a:d, median)
)
df <- tibble(
grp = sample(2, 10, replace = TRUE),
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10)
)
df %>%
group_by(grp) %>%
summarise(across(everything(), median))
rnorm_na <- function(n, n_na, mean = 0, sd = 1){
sample(c(rnorm(n - na, mean = mean, sd = sd), rep(NA, n_na)))
}
df-miss <- tibble(
a = rnorm(5, 1),
b = rnorm(5, 1),
c = rnorm(5, 2),
d = rnorm(5)
)
df_miss <- tibble(
a = rnorm(5, 1),
b = rnorm(5, 1),
c = rnorm(5, 2),
d = rnorm(5)
)
df_miss %>%
summarise(
across(a:d, median),
n = n()
)
df_miss <- tibble(
a = rnorm(5, 1),
b = rnorm(5, 1),
c = rnorm(5, 2),
d = rnorm(5)
)
df_miss %>%
summarise(
across(a:d, median),
n = n()
)
rnorm_na <- function(n, n_na, mean = 0, sd = 1){
sample(c(rnorm(n - na, mean = mean, sd = sd), rep(NA, n_na)))
}
df_miss <- tibble(
a = rnorm_na(5, 1),
b = rnorm_na(5, 1),
c = rnorm_na(5, 2),
d = rnorm(5)
)
rnorm_na <- function(n, n_na, mean = 0, sd = 1){
sample(c(rnorm(n - n_na, mean = mean, sd = sd), rep(NA, n_na)))
}
df_miss <- tibble(
a = rnorm_na(5, 1),
b = rnorm_na(5, 1),
c = rnorm_na(5, 2),
d = rnorm(5)
)
df_miss %>%
summarise(
across(a:d, median),
n = n()
)
df_miss %>%
summarise(
across(a:d, function(x) median(x, na.rm = TRUE)),
n = n()
)
df_miss %>%
summarise(
across(a:d, list(
median = \(x) median(x, na.rm = TRUE),
n_miss = \(x) sum(is.na(x))
)),
n = n()
)
df_miss %>%
summarise(
across(
a:d,
list(
median = \(x) median(x, na.rm = TRUE),
n_miss = \(x) sum(is.na(x))
),
.names = "{.fn}_{.col}"
),
n = n(),
)
df_miss %>%
mutate(
across(a:d, \(x) coalesce(x, 0))
)
df_miss %>%
mutate(
across(a:d, \(x) abs(x), .names = "{.col}_abs")
)
df_miss %>%
filter(if_any(a:d, is.na))
df_miss %>%
filter(if_all(a:d, is.na))
expand_dates <- function(df){
df %>%
mutate(
across(where(is.Date), list(year = year, month = month, day = mday))
)
}
df_date <- tibble(
name = c("Amy", "Bob"),
date = ymd(c("2009-08-03", "2010-01-16"))
)
df_date %>%
expand_dates()
summarize_means <- function(df, summary_vars = where(is.numeric)) {
df %>%
summarise(
across({{summary_vars}}, \(x) mean(x, na.rm = TRUE)),
n = n()
)
}
diamonds %>%
group_by(cut) %>%
summarize_means()
diamonds %>%
group_by(cut) %>%
summarise_means(c(carat, x:z))
diamonds %>%
group_by(cut) %>%
summarize_means(c(carat, x:z))
df %>%
summarise(across(a:d, list(median = median, mean = mean)))
df %>%
summarise(across(a:d, list(median = median, mean = mean)))
long <- df %>%
pivot_longer(a:d) %>%
group_by(name) %>%
summarise(
median = median(value),
mean = mean(value)
)
long
df_paired <- tibble(
a_val = rnorm(10),
a_wts = runif(10),
b_val = rnorm(10),
b_wts = runif(10),
c_val = rnorm(10),
c_wts = runif(10),
d_val = rnorm(10),
d_wts = runif(10)
)
df_long <- df_paired %>%
pivot_longer(
everything(),
names_to = c("group", ".value"),
names_sep = "_"
)
df_long
df_long %>%
group_by(group) %>%
summarise(mean = weighted.mean(val, wts))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
x <- c("one", "two", "three", "four", "five")
x[c(3,2,5)]
x[c(1,1,5,5,5,2)]
x[c(-1, -3, -5)]
x <- c(10, 3, NA, 5, 8, 1, NA)
x[!is.na(x)]
x[x %% 2 == 0]
x <- c(abc = 1, def = 2, xyz = 5)
x[c("xyz", "def")]
x[]
df <- tibble(
x = 1:3,
y = c("a", "e", "f"),
z = runif(3)
)
df[1, 2]
df[, c("x" , "y")]
df[df$x > 1, ]
df <- tibble(
x = c(2, 3, 1, 1, NA),
y = letters[1:5],
z = runif(5)
)
df |> filter(x > 1)
# same as
df[!is.na(df$x) & df$x > 1, ]
df |> arrange(x, y)
# same as
df[order(df$x, df$y), ]
df |> select(x, z)
# same as
df[, c("x", "z")]
df |>
filter(x > 1) |>
select(y, z)
#> # A tibble: 2 × 2
#>   y           z
#>   <chr>   <dbl>
#> 1 a     0.157
#> 2 b     0.00740
df |> subset(x > 1, c(y, z))
tb <- tibble(
x = 1:4,
y = c(10, 4, 1, 21)
)
# by position
tb[[1]]
#> [1] 1 2 3 4
# by name
tb[["x"]]
#> [1] 1 2 3 4
tb$x
#> [1] 1 2 3 4
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
x <- c("one", "two", "three", "four", "five")
x[c(3,2,5)]
x[c(1,1,5,5,5,2)]
x[c(-1, -3, -5)]
x <- c(10, 3, NA, 5, 8, 1, NA)
x[!is.na(x)]
x[x %% 2 == 0]
x <- c(abc = 1, def = 2, xyz = 5)
x[c("xyz", "def")]
x[]
df <- tibble(
x = 1:3,
y = c("a", "e", "f"),
z = runif(3)
)
df[1, 2]
df[, c("x" , "y")]
df[df$x > 1, ]
df <- tibble(
x = c(2, 3, 1, 1, NA),
y = letters[1:5],
z = runif(5)
)
df |> filter(x > 1)
# same as
df[!is.na(df$x) & df$x > 1, ]
df |> arrange(x, y)
# same as
df[order(df$x, df$y), ]
df |> select(x, z)
# same as
df[, c("x", "z")]
df |>
filter(x > 1) |>
select(y, z)
#> # A tibble: 2 × 2
#>   y           z
#>   <chr>   <dbl>
#> 1 a     0.157
#> 2 b     0.00740
df |> subset(x > 1, c(y, z))
tb <- tibble(
x = 1:4,
y = c(10, 4, 1, 21)
)
# by position
tb[[1]]
#> [1] 1 2 3 4
# by name
tb[["x"]]
#> [1] 1 2 3 4
tb$x
#> [1] 1 2 3 4
tb$z <- tb$x + tb$y
tb
#> # A tibble: 4 × 3
#>       x     y     z
#>   <int> <dbl> <dbl>
#> 1     1    10    11
#> 2     2     4     6
#> 3     3     1     4
#> 4     4    21    25
max(diamonds$carat)
#> [1] 5.01
levels(diamonds$cut)
#> [1] "Fair"      "Good"      "Very Good" "Premium"   "Ideal"
#>
diamonds |> pull(carat) |> mean()
#> [1] 0.7979397
diamonds |> pull(cut) |> levels()
#> [1] "Fair"      "Good"      "Very Good" "Premium"   "Ideal"
df <- data.frame(x1 = 1)
df$x
df$f
tb <- tibble(x1 = 1)
tb$x
tb$f
l <- list(
a = 1:3,
b = "a string",
c = pi,
d = list(-1, -5)
)
l
str(l[1:2])
str(l[1:2])
str(l[1])
str(l[4])
str(l[[1]])
str(l[[4]])
str(l$a)
df <- tibble(a = 1, b =2, c = "a", d = "b", e = NA)
num_cols <- sapply(df, is.numeric)
num_cols
df[ , num_cols] <- lapply(df[ , num_cols, drop = FALSE], \(x) x * 2)
df
diamonds |>
group_by(cut)|>
summarise(price = mean(price))
tapply(diamonds$price, diamonds$cut, mean)
hist(diamonds$carat)
plot(diamonds$carat, diamonds$price)
install.packages(c("dygraphs", "DT", "threejs", "DiagrammeR"))
gitcreds::gitcreds_set()
